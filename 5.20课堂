package c8_6;
import java.util.*;
import java.util.Iterator;
import java.util.Set;
public class C8_6 {
	private static void load(Set set) {
		set.add("Cu"); set.add("Ir"); set.add("La"); 
		set.add("Om"); set.add("Pe"); set.add("Cu");
	}
	private static void dump(Set set) {
		for(Iterator<Character> it =set.iterator();it.hasNext();) { // 'Character' could be replaced by 'String'
			System.out.print(it.next()+",");
		}
		System.out.println(" set.size()="+set.size());
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Set<String> set1=new HashSet<String>();
		load(set1);
		dump(set1);  
	}

}

运行结果：
Cu,La,Pe,Ir,Om, set.size()=5





package c8_8;
import java.util.*;
class Dogs implements Comparable<Dogs>
{
	public String name;
	public int weight;
	public int height;
	public Dogs(String s,int w,int h)
	{
		this.name=s;
		this.weight=w;
		this.height=h;
	}
	public void showDogs()
	{
		System.out.print("Name: "+name+"\t"+"Weight: "+weight+"\t"+"Height: "+height+"\n");
	}
	public int compareTo(Dogs d){
		return this.name.compareTo(d.name);
	   // int x=this.weight-d.weight;
	   // return x;
	}
}
public class C8_8 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LinkedHashSet<Dogs> s1=new LinkedHashSet<Dogs>();
		HashSet<Dogs> s2=new HashSet<Dogs>();
		TreeSet<Dogs> s3=new TreeSet<Dogs>();
		
		Dogs D[]=new Dogs[5];
		D[0]=new Dogs ("Adiem",10,80);
		D[1]=new Dogs("Bruce",28,70);
		D[2]=new Dogs("Christopher",20,80);
		D[3]=new Dogs("Duly",30,50);
		
		//Collection<Dogs> list =new ArrayList<Dogs>(Arrays.asList(D));
		s1.add(D[0]);
		s1.add(D[1]);
		s1.add(D[2]);
		
		s2.add(D[0]);
		s2.add(D[1]);
		s2.add(D[2]);
		
		s3.add(D[0]);
		s3.add(D[1]);
		s3.add(D[2]);
		
		System.out.println("Show LinkedHashSet(insert order):");
	   Iterator<Dogs> it=s1.iterator();
	   while(it.hasNext()) {
		   Dogs d=it.next();
		   d.showDogs();
	   }
	   System.out.println();
	   
	   System.out.println("Show HashSet(random name order):");
	   for(it=s2.iterator();it.hasNext();) {
		   Dogs d=it.next();
		   d.showDogs();
	   }
	   System.out.println();
	   
	   System.out.println("Show TreeSet(sorted order: ascending by name):");
	   it=s3.iterator();
	   while(it.hasNext()) {
		   it.next().showDogs();
	   }
	   System.out.println();
	   
	   
	}

}

运行结果：
Show LinkedHashSet(insert order):
Name: Adiem	Weight: 10	Height: 80
Name: Bruce	Weight: 28	Height: 70
Name: Christopher	Weight: 20	Height: 80

Show HashSet(random name order):
Name: Christopher	Weight: 20	Height: 80
Name: Adiem	Weight: 10	Height: 80
Name: Bruce	Weight: 28	Height: 70

Show TreeSet(sorted order: ascending by name):
Name: Adiem	Weight: 10	Height: 80
Name: Bruce	Weight: 28	Height: 70
Name: Christopher	Weight: 20	Height: 80







package c8_9;
import java.util.*;
class Dogs implements Comparable<Dogs>
{
	public String name;
	public int weight;
	public int height;
	public Dogs(String s,int w,int h)
	{
		this.name=s;
		this.weight=w;
		this.height=h;
	}
	public void showDogs()
	{
		System.out.print("Name: "+name+"\t"+"Weight: "+weight+"\t"+"Height: "+height+"\n");
	}
	public int compareTo(Dogs d){ //类型：int！！！
		//return this.name.compareTo(t.name);
	    int x=this.weight-d.weight;
	    return x;
	}
}
//查找重量为10的所有的狗对象，输出
public class C8_9 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SortedSet<Dogs> set=new TreeSet<Dogs>();
		
		Dogs D[]=new Dogs[5];
		D[0]=new Dogs("Adiem",40,80);
		D[1]=new Dogs("Bruce",30,70);
		D[2]=new Dogs("Christopher",20,80);
		D[3]=new Dogs("Duly",10,50);
		
      //  Collection<Dogs> list=new ArrayList<Dogs>(Arrays.asList(D)); 不能照书本这么将所有对象一起加进TreeSet类型集合，因为TreeSet类型集合是线性的，加不了对象
        set.add(D[0]);
        set.add(D[1]);
        set.add(D[2]);
        set.add(D[3]);
 
        System.out.println("show the set(Ascending order in weight): ");
        Iterator<Dogs> it=set.iterator();
        while(it.hasNext()) {
        	Dogs d=it.next();
        	d.showDogs();
        }
        System.out.println();
              
        Collection<Dogs> showHeadSet=set.headSet(new Dogs(null,30,0));
        System.out.println("show the set by operation: headSet()");
        it=showHeadSet.iterator();
        while(it.hasNext()) {
        	Dogs d=it.next();
        	d.showDogs();
        }
        
        Collection<Dogs> showSubSet=set.subSet(new Dogs(null,20,0),new Dogs(null,40,0));
        System.out.println("show the set by operation: subSet()");
        it=showSubSet.iterator();
        while(it.hasNext()) {
        	Dogs d=it.next();
        	d.showDogs();
        }
         System.out.println();
         
        System.out.println("show the first element by operation: first()");
        ((Dogs) set.first()).showDogs();
        System.out.println();
     
        
        System.out.println("show the last element by operation: last()");
        ((Dogs)set.last()).showDogs();
        System.out.println();     
	}

}

运行结果：
show the set(Ascending order in weight): 
Name: Duly	Weight: 10	Height: 50
Name: Christopher	Weight: 20	Height: 80
Name: Bruce	Weight: 30	Height: 70
Name: Adiem	Weight: 40	Height: 80

show the set by operation: headSet()
Name: Duly	Weight: 10	Height: 50
Name: Christopher	Weight: 20	Height: 80
show the set by operation: subSet()
Name: Christopher	Weight: 20	Height: 80
Name: Bruce	Weight: 30	Height: 70

show the first element by operation: first()
Name: Duly	Weight: 10	Height: 50

show the last element by operation: last()
Name: Adiem	Weight: 40	Height: 80





package c8_10;
import java.util.*;
import java.util.Iterator;
import java.util.Map;

public class C8_10 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Map<String,String>map=new HashMap<String,String>();
		map.put("书","Java");
		map.put("学生","张丽");
		map.put("班级","201201");
		System.out.println("map=:"+map.toString());	// print Map
		
		if(map.containsKey("书")) {					// search if there is a Key="书"
			System.out.print("查找Key=书 存在 ");		
			String val=map.get("书");
			System.out.println("书="+val);
		}
		else {
			System.out.println("查找Key=书 不存在");
		}
		
		//get all keys
		Set<String> keys=map.keySet();	// Set<K>keySet:返回此映射中包含的键的Set视图
		
		Iterator<String> iter1=keys.iterator();
		System.out.print("全部的key: ");
		while(iter1.hasNext()) {
			String str=iter1.next();
			System.out.print(str+"、");
		}
		//get all values
		Collection<String>values=map.values();
		Iterator<String>iter2=values.iterator();
		System.out.print("\n 全部的value: ");
		while(iter2.hasNext()) {
			String str=iter2.next();
			System.out.print(str+"、");
		}
		System.out.println();
	}

}

运行结果：
map=:{学生=张丽, 班级=201201, 书=Java}
查找Key=书 存在 书=Java
全部的key: 学生、班级、书、
 全部的value: 张丽、201201、Java、
 
 
 
 
 
 package c8_11gai;
class Dogs implements Comparable<Dogs>
{
   public String name;
   public int weight;
   public int height;
   public Dogs(String name,int w,int h)
   {
	   this.name=name;
	   weight=w;
	   height=h;
   }
   public void showDog()
   {
	   System.out.println("name:"+this.name);
	   System.out.println("weight:"+this.weight);
	   System.out.println("height:"+this.height);
   }
   public int compareTo(Dogs o)
   {
	   int x=this.weight-o.weight;
	   return x;
   }


}
class Box<T>{
	private T t ;
		void g1(T t1) {
			t=t1;
		}
		T get() {
			return t; 
		}
	
}
public class c8_f1gai {
	public static void main(String[]args) {
		Box<Dogs> dogBox=new Box<Dogs>();
		dogBox.g1(new Dogs("Irish",20,100));
		Dogs d=dogBox.get();
		d.showDog();
	}
}

运行结果：
name:Irish
weight:20
height:100









